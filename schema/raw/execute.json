{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Updates contract's config. Only the owner can update the config.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "mint_cost": {
              "description": "New cost to mint token factory tokens.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner": {
              "description": "New owner of the contract.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Burns tokens sent to the contract and mints ash tokens to the sender. Anyone can burn tokens, if the token sent is a fuel token.",
      "type": "object",
      "required": [
        "burn"
      ],
      "properties": {
        "burn": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Adds a new denom to the contract with the given fuel and ash fee rates, and fee recipients. The contract will then be able to accept this denom as fuel. Only the owner can add a new fuel.",
      "type": "object",
      "required": [
        "add_fuel"
      ],
      "properties": {
        "add_fuel": {
          "type": "object",
          "required": [
            "ash_fee_rate",
            "ash_fee_recipient",
            "denom",
            "fuel_fee_rate",
            "fuel_fee_recipient",
            "subdenom"
          ],
          "properties": {
            "ash_fee_rate": {
              "description": "The fee rate that will be charged for minting the ash token.",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "ash_fee_recipient": {
              "description": "The address that will receive the newly minted ash token fees.",
              "type": "string"
            },
            "denom": {
              "description": "The denom that will be accepted as fuel.",
              "type": "string"
            },
            "fuel_fee_rate": {
              "description": "The fee rate that will be charged for burning the fuel token.",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "fuel_fee_recipient": {
              "description": "The address that will receive part of the burned token as fees.",
              "type": "string"
            },
            "subdenom": {
              "description": "Human readable name of the fuel. i.e. `uwhale`",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the fuel config. Only the owner can update the fuel config. If a field is not sent in the message, it will not be updated.",
      "type": "object",
      "required": [
        "update_fuel_config"
      ],
      "properties": {
        "update_fuel_config": {
          "type": "object",
          "required": [
            "fuel_denom"
          ],
          "properties": {
            "ash_fee_rate": {
              "description": "The fee rate that will be charged for minting the ash token.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "ash_fee_recipient": {
              "description": "The address that will receive the newly minted ash token fees.",
              "type": [
                "string",
                "null"
              ]
            },
            "fuel_denom": {
              "description": "The denom that will be accepted as fuel.",
              "type": "string"
            },
            "fuel_fee_rate": {
              "description": "The fee rate that will be charged for burning the fuel token.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fuel_fee_recipient": {
              "description": "The address that will receive part of the burned token as fees.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
